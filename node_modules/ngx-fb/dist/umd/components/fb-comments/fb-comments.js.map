{"version":3,"sources":["../../../../src/components/fb-comments/fb-comments.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,sCAAwE;IACxE,oDAAiE;IAEjE;;;;;;;;;;;;;OAaG;IAEH;QAAyC,uCAAa;QAiDpD,6BAAY,EAAc,EAAE,GAAc;YAA1C,YACE,kBAAM,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,SAC9B;YA3CD;;;;eAIG;YAGH,UAAI,GAAW,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;;QAoCpC,CAAC;QACI,8BAAU,GAA0B;YAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC;wBACxB,QAAQ,EAAE,aAAa;wBACvB,QAAQ,EAAE,EAAE;qBACb,EAAG,EAAE;SACL,CAAC;QACF,kBAAkB;QACX,kCAAc,GAAmE,cAAM,OAAA;YAC9F,EAAC,IAAI,EAAE,iBAAU,GAAG;YACpB,EAAC,IAAI,EAAE,gBAAS,GAAG;SAClB,EAH6F,CAG7F,CAAC;QACK,kCAAc,GAA2C;YAChE,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;YACjC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;YAC1B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;YAC5B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;YAC9B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;YAC7B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;SAC1B,CAAC;QAhEA;YADC,8BAAa;;gEACM;QASpB;YADC,8BAAa;;yDACsB;QAOpC;YADC,8BAAa;;2DACE;QAOhB;YADC,8BAAa;;6DACG;QAOjB;YADC,8BAAa;;4DACE;QAWhB;YADC,8BAAa;;0DACA;QAwBhB,0BAAC;KAvED,AAuEC,CAvEwC,8BAAa,GAuErD;IAvEY,kDAAmB","file":"fb-comments.js","sourceRoot":"","sourcesContent":["import { Component, Input, ElementRef, Renderer2 } from '@angular/core';\nimport { FBMLAttribute, FBMLComponent } from '../fbml-component';\n\n/**\n * @name Comments\n * @shortdesc Comments component\n * @fbdoc https://developers.facebook.com/docs/plugins/comments\n * @description\n * The comments plugin lets people comment on content on your site using their Facebook account.\n * People can choose to share their comment activity with their friends (and friends of their friends) on Facebook as well.\n * The comments plugin also includes built-in moderation tools and social relevance ranking.\n *\n * @usage\n * ```html\n * <fb-comments></fb-comments>\n * ```\n */\n\nexport class FBCommentsComponent extends FBMLComponent {\n  /**\n   * The color scheme used by the comments plugin. Can be `light` or `dark`. Defaults to `light`.\n   */\n  \n  @FBMLAttribute\n  colorscheme: string;\n\n  /**\n   * The absolute URL that comments posted in the plugin will be permanently associated with.\n   * All stories shared on Facebook about comments posted using the comments plugin will link to this URL.\n   * Defaults to current URL.\n   */\n  \n  @FBMLAttribute\n  href: string = window.location.href;\n\n  /**\n   * A boolean value that specifies whether to show the mobile-optimized version or not. If no value is given, it will be automatically detected.\n   */\n  \n  @FBMLAttribute\n  mobile: boolean;\n\n  /**\n   * The number of comments to show by default. The minimum value is `1`. Defaults to `10`.\n   */\n  \n  @FBMLAttribute\n  numposts: number;\n\n  /**\n   * The order to use when displaying comments. Can be `social`, `reverse_time`, or `time`. The different order types are explained [in the FAQ](https://developers.facebook.com/docs/plugins/comments#faqorder). Defaults to `social`\n   */\n  \n  @FBMLAttribute\n  orderBy: string;\n\n  /**\n   * The width of the comments plugin on the webpage.\n   * This can be either a pixel value or a percentage (such as 100%) for fluid width.\n   * The mobile version of the comments plugin ignores the width parameter and instead has a fluid width of 100%.\n   * The minimum width supported by the comments plugin is 320px.\n   * Defaults to `550px`.\n   */\n  \n  @FBMLAttribute\n  width: string;\n\n  constructor(el: ElementRef, rnd: Renderer2) {\n    super(el, rnd, 'fb-comments');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'fb-comments',\n  template: '',\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'colorscheme': [{ type: Input },],\n'href': [{ type: Input },],\n'mobile': [{ type: Input },],\n'numposts': [{ type: Input },],\n'orderBy': [{ type: Input },],\n'width': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}